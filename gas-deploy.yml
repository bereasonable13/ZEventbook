name: Deploy to Google Apps Script

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production

env:
  NODE_VERSION: '20'

jobs:
  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'test'
    environment:
      name: test
      url: ${{ secrets.GAS_TEST_URL }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install clasp
        run: npm install -g @google/clasp
      
      - name: Configure clasp credentials
        run: |
          echo "${{ secrets.CLASP_CREDENTIALS }}" > ~/.clasprc.json
          chmod 600 ~/.clasprc.json
      
      - name: Configure project
        run: |
          echo "${{ secrets.CLASP_JSON }}" > .clasp.json
          chmod 600 .clasp.json
      
      - name: Push to Apps Script
        run: clasp push --force
      
      - name: Deploy test version
        id: deploy
        run: |
          DEPLOY_ID=$(clasp deploy --description "Test deployment - ${{ github.sha }}" | grep -oP 'Created version \K\d+')
          echo "deployment_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "✅ Deployed version: $DEPLOY_ID"
      
      - name: Get deployment URL
        run: |
          # Extract the web app URL from the deployment
          echo "Test deployment available at:"
          echo "${{ secrets.GAS_TEST_URL }}"
      
      - name: Run smoke tests
        env:
          TEST_URL: ${{ secrets.GAS_TEST_URL }}
        run: |
          if [ -z "$TEST_URL" ]; then
            echo "⚠️  TEST_URL not set - skipping smoke tests"
            exit 0
          fi
          
          # Simple health check
          echo "Running smoke test..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$TEST_URL")
          
          if [ $HTTP_CODE -eq 200 ]; then
            echo "✅ Smoke test passed - returned 200"
          else
            echo "❌ Smoke test failed - returned $HTTP_CODE"
            exit 1
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-test
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ secrets.GAS_PROD_URL }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install clasp
        run: npm install -g @google/clasp
      
      - name: Configure clasp credentials
        run: |
          echo "${{ secrets.CLASP_CREDENTIALS }}" > ~/.clasprc.json
          chmod 600 ~/.clasprc.json
      
      - name: Configure project
        run: |
          echo "${{ secrets.CLASP_JSON }}" > .clasp.json
          chmod 600 .clasp.json
      
      - name: Deploy production version
        id: deploy
        run: |
          VERSION=$(date +%Y.%m.%d.%H%M)
          DEPLOY_OUTPUT=$(clasp deploy --description "Production v$VERSION - ${{ github.sha }}")
          DEPLOY_ID=$(echo "$DEPLOY_OUTPUT" | grep -oP 'Created version \K\d+')
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "deployment_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          
          echo "✅ Deployed production version: $VERSION (ID: $DEPLOY_ID)"
      
      - name: Health check
        env:
          PROD_URL: ${{ secrets.GAS_PROD_URL }}
        run: |
          echo "Running production health check..."
          
          # Wait a moment for deployment to propagate
          sleep 10
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$PROD_URL")
          
          if [ $HTTP_CODE -eq 200 ]; then
            echo "✅ Production health check passed"
          else
            echo "❌ Production health check failed - returned $HTTP_CODE"
            exit 1
          fi
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.deploy.outputs.version }}
          release_name: Release v${{ steps.deploy.outputs.version }}
          body: |
            ## Production Deployment
            
            **Version:** ${{ steps.deploy.outputs.version }}
            **Commit:** ${{ github.sha }}
            **Deployment ID:** ${{ steps.deploy.outputs.deployment_id }}
            
            ### Changes
            See [commit history](https://github.com/${{ github.repository }}/commits/${{ github.sha }})
            
            ### URLs
            - Production: ${{ secrets.GAS_PROD_URL }}
            - Test: ${{ secrets.GAS_TEST_URL }}
          draft: false
          prerelease: false

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-test, deploy-production]
    if: always()
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Production deployment successful!"
          elif [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
            echo "⏭️  Production deployment skipped"
          else
            echo "❌ Production deployment failed!"
          fi