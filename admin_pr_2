/************************************************************
 * NextUp · Compat Pack (maintainable layout)
 * - Ensures Template & Control workbooks
 * - Creates per-event workbooks from Control
 * - Minimal events listing + cache busting
 * - Bootstrap endpoint for cold opens
 * NOTE: This is a reorganization of your existing code. Logic preserved.
 ************************************************************/


/* ==========================================================
 * 0) CONSTANTS / KEYS
 * ========================================================== */

var _NP = (typeof _K === 'object' ? _K : {
  CTRL_TEMPLATE_ID: 'nu_control_template_id',
  CTRL_BOOK_ID:     'nu_control_book_id',
  CTRL_REQ_TABS:    'nu_control_required_tabs',
  EVENT_BOOK_PREFIX:'nu_event_book_',
  PU_PREFIX:        'nu_test_pu_',
  PUQ_PREFIX:       'nu_test_puq_',
  SU_PREFIX:        'nu_test_su_',
  SUQ_PREFIX:       'nu_test_suq_',
  EVENTS_CACHE:     'events_payload_v1',
  EVENTS_ETAG:      'nu_events_etag_salt'
});


/* ==========================================================
 * 1) LOW-LEVEL UTILITIES
 * ========================================================== */

function _np_todayISO_(){ return new Date().toISOString().slice(0,10); }
function _np_json_(x){ return JSON.stringify(x); }
function _np_sha1_(s){
  var b = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_1, s, Utilities.Charset.UTF_8);
  return b.map(function(v){v=(v+256)%256; return ('0'+v.toString(16)).slice(-2);}).join('');
}

function _np_requiredTabs_(){
  // Optional ScriptProperty override: nu_control_required_tabs = "Config,Roster,Schedule"
  var csv = PropertiesService.getScriptProperties().getProperty(_NP.CTRL_REQ_TABS) || '';
  var explicit = csv.split(',').map(function(s){return s.trim();}).filter(Boolean);
  if (explicit.length) return explicit;
  // Defaults
  return ['Config','Roster','Schedule'];
}

function _np_markProv_(ss, kind){
  var sh = ss.getSheetByName('__nextup_meta'); 
  if (!sh) { sh = ss.insertSheet('__nextup_meta'); sh.hideSheet(); }
  sh.getRange(1,1,1,3).setValues([[String(kind||'control'), Utilities.getUuid(), new Date()]]);
}

function _np_validTabs_(ss, req){
  var have = ss.getSheets().map(function(s){return s.getName();});
  var missing = req.filter(function(n){ return have.indexOf(n) < 0; });
  return { ok: missing.length===0, missing: missing };
}


/* ==========================================================
 * 2) TEMPLATE SCHEMA + BUILDER
 * ========================================================== */

function _np_templateSchema_(){
  return {
    name: 'NextUp – control (template)',
    tabs: [
      { name:'Config',   rows:[['Field','Value'],['Event Name',''],['Slug',''],['Date (ISO)',''],['Event ID','']], widths:[140,420] },
      { name:'Roster',   rows:[['Name','Role','Notes']], widths:[200,140,320] },
      { name:'Schedule', rows:[['When','Item','Location','Notes']], widths:[120,220,180,260] }
    ]
  };
}

function _np_buildFromSchema_(schema, kind){
  var ss = SpreadsheetApp.create(schema.name);
  var sh0 = ss.getSheets()[0]; if (sh0) ss.deleteSheet(sh0);
  schema.tabs.forEach(function(t){
    var sh = ss.insertSheet(t.name);
    if (t.rows && t.rows.length){
      var r = sh.getRange(1,1,t.rows.length,t.rows[0].length);
      r.setValues(t.rows); 
      r.setFontWeight('bold');
      if (t.rows.length>1) sh.getRange(2,1,t.rows.length-1,t.rows[0].length).setFontWeight('normal');
    }
    if (t.widths) t.widths.forEach(function(w,i){ try{ sh.setColumnWidth(i+1,w);}catch(_e){} });
  });
  _np_markProv_(ss, kind||'template');
  return ss;
}


/* ==========================================================
 * 3) CONTROL / TEMPLATE ENSURERS (PUBLIC API)
 * ========================================================== */

/** ensureTemplateWorkbook()
 * Creates a template workbook if missing or invalid. Stores ID in ScriptProperties.
 */
function ensureTemplateWorkbook(){
  var p = PropertiesService.getScriptProperties();
  var req = _np_requiredTabs_();
  var id = p.getProperty(_NP.CTRL_TEMPLATE_ID);

  // Validate existing template
  if (id) {
    try {
      var tpl = SpreadsheetApp.openById(id);
      var v = _np_validTabs_(tpl, req);
      if (v.ok) return { ok:true, created:false, templateId:id };

      // If it's our template, trash and recreate
      _np_markProv_(tpl, 'template'); // ensure marker exists
      DriveApp.getFileById(id).setTrashed(true);
      p.deleteProperty(_NP.CTRL_TEMPLATE_ID);
      id = null;
    } catch(_e){ 
      p.deleteProperty(_NP.CTRL_TEMPLATE_ID); 
      id=null; 
    }
  }

  // Create new template
  if (!id){
    var ss = _np_buildFromSchema_(_np_templateSchema_(), 'template');
    id = ss.getId();
    p.setProperty(_NP.CTRL_TEMPLATE_ID, id);
    return { ok:true, created:true, templateId:id };
  }

  return { ok:true, created:false, templateId:id };
}

/** ensureControlWorkbook()
 * Ensures a Control workbook exists, copying from the Template if needed.
 */
function ensureControlWorkbook(){
  var p = PropertiesService.getScriptProperties();

  // Ensure a valid template first
  var et = ensureTemplateWorkbook(); 
  if (!et.ok) return { ok:false, error:'template_bootstrap_failed' };

  var tplId = et.templateId;
  var req = _np_requiredTabs_();

  // Re-use existing Control if valid
  var cid = p.getProperty(_NP.CTRL_BOOK_ID);
  if (cid){
    try{
      var ctrl = SpreadsheetApp.openById(cid);
      var v = _np_validTabs_(ctrl, req);
      if (v.ok) return { ok:true, created:false, controlId:cid, templateId:tplId };
      DriveApp.getFileById(cid).setTrashed(true);
      p.deleteProperty(_NP.CTRL_BOOK_ID);
      cid = null;
    } catch(_e){ 
      p.deleteProperty(_NP.CTRL_BOOK_ID); 
      cid=null; 
    }
  }

  // Copy new Control from the Template
  var ctrlNew = SpreadsheetApp.openById(tplId).copy('NextUp – control ('+_np_todayISO_()+')');
  _np_markProv_(ctrlNew, 'control');
  p.setProperty(_NP.CTRL_BOOK_ID, ctrlNew.getId());

  // Validate the fresh copy (defensive)
  var v2 = _np_validTabs_(ctrlNew, req);
  if (!v2.ok) {
    return { ok:false, error:'control_invalid_after_copy', missing:v2.missing, controlId:ctrlNew.getId(), templateId:tplId };
  }
  return { ok:true, created:true, controlId:ctrlNew.getId(), templateId:tplId };
}


/* ==========================================================
 * 4) EVENTBOOK CREATION (PUBLIC API)
 * ========================================================== */

/** createEventFromControl(payload)
 * Copies the Control workbook to create a per-event workbook,
 * seeds Config, persists link placeholders, and busts caches.
 * Returns eventBookId + link verification state.
 */
function createEventFromControl(payload){
  if (!payload || !payload.id) return { ok:false, error:'missing_event_id' };

  var eventId = String(payload.id);
  var slug    = String(payload.slug || payload.id);
  var name    = String(payload.name || slug);
  var dateISO = String(payload.dateISO || _np_todayISO_());
  var includeSignup = !!payload.includeSignup;

  var lock = LockService.getScriptLock(); lock.tryLock(5000);
  try{
    var p = PropertiesService.getScriptProperties();

    // Ensure Control exists
    var boot = ensureControlWorkbook();
    if (!boot.ok) return { ok:false, error: boot.error || 'control_bootstrap_failed', detail: boot };

    // Reuse existing event workbook if already provisioned
    var exist = p.getProperty(_NP.EVENT_BOOK_PREFIX + eventId);
    if (exist){
      try { SpreadsheetApp.openById(exist); } catch(_e){ exist=''; }
    }

    var evId = exist;
    if (!evId){
      // Copy Control → Event workbook
      var ev = SpreadsheetApp.openById(boot.controlId).copy('NextUp – '+slug);
      evId = ev.getId();
      p.setProperty(_NP.EVENT_BOOK_PREFIX + eventId, evId);
      _np_markProv_(ev, 'event');

      // Seed Config sheet if present
      var cfg = ev.getSheetByName('Config');
      if (cfg){
        var map = { 'B2': name, 'B3': slug, 'B4': dateISO, 'B5': eventId };
        Object.keys(map).forEach(function(a1){ 
          try { cfg.getRange(a1).setValue(map[a1]); } catch(_e){} 
        });
      }
    }

    // Provision placeholder links (replace base with your real URL builder if desired)
    var base = 'https://example.com';
    var links = {
      publicUrl: base + '/e/' + encodeURIComponent(slug),
      signupUrl: includeSignup ? (base + '/f/' + encodeURIComponent(slug)) : ''
    };

    // Persist link state as UNVERIFIED on create
    if (links.publicUrl) { 
      p.setProperty(_NP.PU_PREFIX + eventId, links.publicUrl); 
      p.setProperty(_NP.PUQ_PREFIX + eventId, '0'); 
    }
    if (links.signupUrl) { 
      p.setProperty(_NP.SU_PREFIX + eventId, links.signupUrl); 
      p.setProperty(_NP.SUQ_PREFIX + eventId, '0'); 
    }

    // Bust caches so Admin dropdown refreshes immediately
    try { if (typeof bustEventsCache_ === 'function') bustEventsCache_(); } catch(_e){}
    try { 
      if (typeof bustEventsCache === 'function') bustEventsCache(); 
      else CacheService.getScriptCache().remove(_NP.EVENTS_CACHE); 
    } catch(_e){}

    return { 
      ok:true, 
      created: !exist, 
      eventId:eventId, 
      eventBookId:evId,
      links: links, 
      verified:{ public:false, signup:false } 
    };
  } finally { 
    try{ lock.releaseLock(); }catch(_e){} 
  }
}


/* ==========================================================
 * 5) ADMIN/TEST BOOTSTRAP (PUBLIC API)
 * ========================================================== */

function bootstrapControlAndTemplate(){
  var t = ensureTemplateWorkbook();
  var c = ensureControlWorkbook();
  return { ok: (t && t.ok!==false) && (c && c.ok!==false), template:t, control:c };
}


/* ==========================================================
 * 6) EVENTS LISTING (PUBLIC API)
 * ========================================================== */

function listEvents(){
  // Minimal stub: enumerates ScriptProperties keys created by createEventFromControl().
  // If you already have a richer listEvents(), prefer that implementation.
  var p = PropertiesService.getScriptProperties();
  var all = p.getProperties();
  var evs = [];
  Object.keys(all).forEach(function(k){
    if (k.indexOf(_NP.EVENT_BOOK_PREFIX)===0){
      var id = k.slice(_NP.EVENT_BOOK_PREFIX.length);
      evs.push({ id:id, slug:id, name:id, startDateISO:_np_todayISO_() });
    }
  });
  return { ok:true, events: evs };
}


/* ==========================================================
 * 7) CACHE BUSTERS (PUBLIC API)
 * ========================================================== */

function bustEventsCache_(){ 
  PropertiesService.getScriptProperties()
    .setProperty(_NP.EVENTS_ETAG, String(Math.random())+':'+Date.now()); 
}

function bustEventsCache(){ 
  CacheService.getScriptCache().remove(_NP.EVENTS_CACHE); 
}
