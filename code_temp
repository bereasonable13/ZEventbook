/************************************************************
* NextUp v4.1 — Server (Google Apps Script)
* Suite Index
* [S01] Build / Constants
* [S02] Router (HTML pages, include, ping)
* [S03] Control Workbook (locate/create + headers)
* [S04] Events Index (ETag discipline)
* [S05] Create Event (simple v4.1)
* [S06] Create Eventbook (idempotent + lock)
* [S07] Provisioning FSM (step/status + links)
* [S08] Public Bundle / QR
* [S09] Default / Archive
* [S10] Control Row CRUD (find/upsert helpers)
* [S11] Utilities (cache, etag, dates, slugs, normalize, escape)
* [S12] Audit Endpoints (Status.html)
************************************************************/


/* ==========================================================
   [S01] Build / Constants
   ========================================================== */
const BUILD_ID = 'nextup-v4.1-eventbooks';

const STATUS = Object.freeze({
  CREATED: 'CREATED',
  WORKBOOK_READY: 'WORKBOOK_READY',
  LINKS_READY: 'LINKS_READY',
  ERROR: 'ERROR'
});

/** Base columns controlled by the app (do not reorder lightly). */
const CONTROL_HEADERS = Object.freeze([
  'id','name','slug','startDateISO',
  'eventSpreadsheetId','eventSpreadsheetUrl',
  'eventTag','isDefault',
  'seedMode','elimType',
  // v4+ operational columns:
  'status','statusMsg','updatedAtISO',
  'publicUrl','displayUrl'
]);

/** Where the control Spreadsheet lives. */
const PROP_CONTROL_ID = 'nu_control_ss_id';


/* ==========================================================
   [S02] Router (HTML pages, include, ping)
   ========================================================== */
function doGet(e){
  try{
    const page = (e && e.parameter && e.parameter.p || '').trim().toLowerCase();
    if (!page) return htmlError_(400,'Missing ?p route');

    // HTML pages
    if (['admin','public','display','poster','status'].includes(page)){
      const t = HtmlService.createTemplateFromFile(cap_(page));
      t.appTitle = 'NextUp';
      t.BUILD_ID = BUILD_ID;
      t.include  = include;
      return t.evaluate()
        .setTitle('NextUp · ' + cap_(page))
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
        .addMetaTag('viewport','width=device-width,initial-scale=1,viewport-fit=cover');
    }

    // Simple health check
    if (page === 'ping') return ContentService.createTextOutput(ping());

    return htmlError_(404, 'Unknown page: ' + page);
  } catch(err){
    return htmlError_(500, String(err));
  }
}

function include(filename){
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

function ping(){ return 'ok ' + BUILD_ID; }

function cap_(s){ return s ? s.charAt(0).toUpperCase() + s.slice(1) : s; }
function htmlError_(code, msg){
  const html = HtmlService.createHtmlOutput(
    '<!doctype html><meta charset="utf-8"><title>Error</title><pre>' +
    escHtml_(String(msg)) + '</pre>'
  );
  return html.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}


/* ==========================================================
   [S03] Control Workbook (locate/create + headers)
   ========================================================== */
function getOrCreateControl_(){
  const props = PropertiesService.getScriptProperties();
  const CANON  = 'NextUp - Control';  // hyphenated canonical
  const LEGACY = 'NextUp Control';    // legacy (no hyphen)
  let ssId = props.getProperty(PROP_CONTROL_ID);
  let ss = null;

  // 1) Stored ID
  if (ssId){ try { ss = SpreadsheetApp.openById(ssId); } catch(_){} }

  // 2) Canonical name
  if (!ss){
    const it = DriveApp.getFilesByName(CANON);
    if (it.hasNext()){ const f = it.next(); ss = SpreadsheetApp.open(f); props.setProperty(PROP_CONTROL_ID, ss.getId()); }
  }

  // 3) Legacy → adopt + rename
  if (!ss){
    const it2 = DriveApp.getFilesByName(LEGACY);
    if (it2.hasNext()){ const f = it2.next(); ss = SpreadsheetApp.open(f); try{ f.setName(CANON);}catch(_){} props.setProperty(PROP_CONTROL_ID, ss.getId()); }
  }

  // 4) Broad search (defensive)
  if (!ss){
    const q = 'mimeType = "application/vnd.google-apps.spreadsheet" and title contains "NextUp" and title contains "Control"';
    const it3 = DriveApp.searchFiles(q);
    if (it3.hasNext()){ const f = it3.next(); ss = SpreadsheetApp.open(f); try{ f.setName(CANON);}catch(_){} props.setProperty(PROP_CONTROL_ID, ss.getId()); }
  }

  // 5) Create fresh
  if (!ss){ ss = SpreadsheetApp.create(CANON); props.setProperty(PROP_CONTROL_ID, ss.getId()); }

  // 6) Ensure Events sheet + headers
  let sh = ss.getSheetByName('Events');
  if (!sh) sh = ss.insertSheet('Events', 0);
  ensureHeaders_(sh, CONTROL_HEADERS);

  return ss;
}

function ensureHeaders_(sh, headers){
  const firstRow = sh.getRange(1,1,1,Math.max(headers.length, sh.getMaxColumns()));
  const values = firstRow.getValues()[0];
  for (let col=1; col<=headers.length; col++){
    if ((values[col-1] || '') !== headers[col-1]){
      sh.getRange(1,col).setValue(headers[col-1]);
    }
  }
  SpreadsheetApp.flush();
}


/* ==========================================================
   [S04] Events Index (ETag discipline)
   ========================================================== */
function getEventsSafe(etagIn){
  try{
    const out = readEventsIndex_();                   // { items, etag }
    const items = out.items || [];
    const etag  = out.etag || computeEtag_(items);    // stable ETag
    const notModified = !!etagIn && etagIn === etag;
    return { ok:true, items: notModified ? [] : items, etag, notModified };
  } catch (err){
    return { ok:false, items:[], etag:null, notModified:false, error: String(err && err.stack || err) };
  }
}

function readEventsIndex_(){
  const ss = getOrCreateControl_();
  const sh = ss.getSheetByName('Events');
  const range = sh.getDataRange().getValues();
  const headers = range[0];
  const items = [];
  for (let r=1; r<range.length; r++){
    const row = toObj_(headers, range[r]);
    if (!row.id && !row.slug) continue;
    items.push(row);
  }
  const etag = computeEtag_(items);
  return { items, etag };
}

function toObj_(headers, arr){
  const o = {};
  const n = Math.min(headers.length, arr.length);
  for (let i=0;i<n;i++){
    const k = (headers[i] || '').toString().trim();
    if (!k) continue;
    o[k] = arr[i];
  }
  return o;
}


/* ==========================================================
   [S05] Create Event (simple v4.1)
   ========================================================== */
function createEvent(payload){
  try{
    const name = String((payload && payload.name) || '').trim();
    if (!name) return { ok:false, error:'Missing name' };

    const startDateISO = normalizeDateISO_((payload && payload.startDateISO) || null);
    const elimType = normEnum_((payload && payload.elimType) || 'single', ['single','double','round-robin']);
    const seedMode = normEnum_((payload && payload.seedMode) || 'seeded', ['seeded','random','none']);
    const slugInput = (payload && payload.slug) || '';
    const slug = uniqueSlug_(slugify_(slugInput || name));

    const nowISO = todayTimeISO_();
    const id = genId_();
    const item = {
      id, name, slug, startDateISO,
      eventSpreadsheetId:'', eventSpreadsheetUrl:'',
      eventTag: makeTag_(name, startDateISO, id),
      isDefault:false,
      seedMode, elimType,
      status: STATUS.CREATED, statusMsg:'',
      updatedAtISO: nowISO,
      publicUrl:'', displayUrl:''
    };

    upsertRow_(item);
    bustEventsCache_();

    return { ok:true, item };
  } catch(e){
    return { ok:false, error:String(e) };
  }
}


/* ==========================================================
   [S06] Create Eventbook (idempotent + lock)
   ========================================================== */
/**
 * createEventbook(payload): {ok, item, etag, idempotent?: boolean, error?}
 * payload = { name, startDateISO, elimType, seedMode }
 * Foundation: null-safe, idempotent (slug#date), 60s mutex, auto-default on first.
 */
function createEventbook(payload){
  // -------- guards --------
  try { if (typeof ensureControlStrictOnBoot === 'function') ensureControlStrictOnBoot(); } catch(_){}
  const tz = Session.getScriptTimeZone();
  const name = String(payload?.name || '').trim();
  if (!name) return { ok:false, error:'Missing event name' };

  const startISO = _normalizeDateISO_(payload?.startDateISO, tz); // yyyy-MM-dd
  const elimType = String(payload?.elimType || 'single').toLowerCase();
  const seedMode = String(payload?.seedMode || 'seeded').toLowerCase();
  const slugBase = _slugify_(name);
  const idemKey  = `${slugBase}#${startISO}`;
  const lockKey  = `CREATE_LOCK:${idemKey}`;

  // -------- mutex (60s TTL) --------
  if (!_acquireCreateLock_(lockKey, 60)){
    return { ok:false, error:'Another create is in progress for this event (try again in a moment)' };
  }

  try{
    const ctl = _getControl_();
    const sh  = _eventsSheet_(ctl);

    // 1) Idempotency
    const existing = _findEventBySlugDate_(sh, slugBase, startISO);
    if (existing){
      const etag = _computeEventsEtag_();
      return { ok:true, item:existing, etag, idempotent:true };
    }

    // 2) Allocate new id/tag; write index row
    const id  = _genId12_();
    const slug = _uniqueSlug_(sh, slugBase);
    const tag  = `${slug}-${startISO.replace(/-/g,'')}-${id.slice(0,6)}`;

    const row = sh.getLastRow() + 1;
    const values = [
      id, name, slug, startISO,
      '', '', /* formId */ '', /* eventTag */ tag,
      false /* isDefault */, seedMode, elimType,
      '', '', ''
    ];
    sh.getRange(row,1,1,values.length).setValues([values]);

    // 3) Provision workbook
    const book = SpreadsheetApp.create(`EVT__${tag}`);
    const eventSpreadsheetId  = book.getId();
    const eventSpreadsheetUrl = book.getUrl();
    const first = book.getSheets()[0]; if (first) first.setName('Events');
    if (typeof seedEventbookWorkbook_ === 'function'){
      try { seedEventbookWorkbook_(book, { id, name, slug, startISO, eventTag:tag, seedMode, elimType }); } catch(_){}
    }

    // 4) Mirror workbook
    sh.getRange(row,5,1,2).setValues([[eventSpreadsheetId, eventSpreadsheetUrl]]);
    if (typeof updateEventbookMirror_ === 'function'){ try{ updateEventbookMirror_(sh, row); }catch(_){} }

    // 5) Auto-default if this is the first event
    _ensureOneDefault_(sh, row);

    // 6) Bust cache / compute etag
    try { if (typeof bustEventsCache === 'function') bustEventsCache(); } catch(_){}
    const etag = _computeEventsEtag_();

    const item = {
      id, name, slug, startDateISO:startISO,
      eventSpreadsheetId, eventSpreadsheetUrl,
      eventTag: tag, isDefault: _readBool_(sh.getRange(row,9).getValue()),
      seedMode, elimType
    };
    return { ok:true, item, etag };
  } catch(err){
    return { ok:false, error:String(err && err.stack || err) };
  } finally {
    _releaseCreateLock_(lockKey);
  }
}

/* ---- internal (createEventbook) helpers ---- */
function _getControl_(){
  if (typeof getControlSpreadsheet_ === 'function') return getControlSpreadsheet_();
  const id = PropertiesService.getScriptProperties().getProperty('CONTROL_SSID');
  if (!id) throw new Error('Control SSID missing; run ensureControlStrictOnBoot first');
  return SpreadsheetApp.openById(id);
}
function _eventsSheet_(ctl){
  const name = 'Events';
  let sh = ctl.getSheetByName(name);
  if (!sh) sh = ctl.insertSheet(name);
  _ensureEventsHeader_(sh);
  return sh;
}
function _ensureEventsHeader_(sh){
  const header = ['id','name','slug','startDateISO','eventSpreadsheetId','eventSpreadsheetUrl','formId','eventTag','isDefault','seedMode','elimType','reserved1','reserved2','reserved3'];
  if (sh.getLastRow()===0) sh.appendRow(header);
  else {
    const h = sh.getRange(1,1,1,header.length).getValues()[0] || [];
    if (h.join('|') !== header.join('|')) sh.getRange(1,1,1,header.length).setValues([header]);
  }
}
function _normalizeDateISO_(d, tz){
  if (!d) return Utilities.formatDate(new Date(), tz || Session.getScriptTimeZone(),'yyyy-MM-dd');
  if (typeof d==='string' && /^\d{4}-\d{2}-\d{2}$/.test(d)) return d;
  return Utilities.formatDate(new Date(d), tz || Session.getScriptTimeZone(),'yyyy-MM-dd');
}
function _slugify_(s){
  return String(s||'').toLowerCase().replace(/['’]/g,'').replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').replace(/-+/g,'-');
}
function _uniqueSlug_(sh, base){
  const last = sh.getLastRow();
  const vals = last>=2 ? sh.getRange(2,3,last-1,1).getValues().flat() : [];
  if (!vals.includes(base)) return base;
  let i=2; while (vals.includes(`${base}-${i}`)) i++;
  return `${base}-${i}`;
}
function _findEventBySlugDate_(sh, slugBase, startISO){
  const last = sh.getLastRow(); if (last<2) return null;
  const rows = sh.getRange(2,1,last-1,11).getValues(); // through elimType
  for (let i=0;i<rows.length;i++){
    const [id,name,slug,dateISO,ssid,surl,formId,tag,isDef,seed,elim] = rows[i];
    if (String(dateISO)===startISO && String(slug).replace(/-\d+$/,'')===slugBase){
      return {
        id, name, slug, startDateISO:dateISO,
        eventSpreadsheetId:ssid, eventSpreadsheetUrl:surl,
        eventTag:tag, isDefault:_readBool_(isDef),
        seedMode:seed, elimType:elim
      };
    }
  }
  return null;
}
function _ensureOneDefault_(sh, newRow){
  const last = sh.getLastRow();
  const count = Math.max(0, last-1);
  if (count===1){ sh.getRange(newRow, 9).setValue(true); return; }
  const col = 9;
  const vals = sh.getRange(2,col,count,1).getValues().flat();
  const trues = vals.reduce((a,v,i)=>(v===true?a.concat(i+2):a),[]);
  if (trues.length>1){
    for (const r of trues) if (r!==newRow) sh.getRange(r,col).setValue(false);
    sh.getRange(newRow,col).setValue(true);
  }
}
function _readBool_(v){ return v===true || String(v).toLowerCase()==='true'; }
function _genId12_(){ const n = Math.floor(Math.random()*Number.MAX_SAFE_INTEGER); return (n.toString(36)+Date.now().toString(36)).slice(-12); }
function _computeEventsEtag_(){
  try{
    if (typeof readEventsIndex_ === 'function'){
      const out = readEventsIndex_();
      if (typeof _nuComputeEtag_ === 'function') return _nuComputeEtag_(out.items || []);
      return Utilities.base64EncodeWebSafe(JSON.stringify(out.items || [])).slice(0,16);
    }
  } catch(_){}
  return Utilities.base64EncodeWebSafe(String(Date.now())).slice(0,16);
}

/* ---- locking (script + soft TTL) ---- */
function _acquireCreateLock_(key, ttlSec){
  try{
    const lock = LockService.getScriptLock();
    if (lock.tryLock(5000)){ return _claimSoftLock_(key, ttlSec, lock); }
  } catch(_){}
  return _claimSoftLock_(key, ttlSec, null);
}
function _claimSoftLock_(key, ttlSec, heldLock){
  const sp = PropertiesService.getScriptProperties();
  const now = Date.now();
  const ttl = (ttlSec||60)*1000;
  const raw = sp.getProperty(key);
  if (raw){
    try { const obj = JSON.parse(raw); if (obj.expiresAt && obj.expiresAt > now) return false; } catch(_){}
  }
  sp.setProperty(key, JSON.stringify({ owner: Session.getEffectiveUser()?.getEmail() || 'anon', expiresAt: now + ttl }));
  if (heldLock) Utilities.sleep(0);
  return true;
}
function _releaseCreateLock_(key){
  try { PropertiesService.getScriptProperties().deleteProperty(key); } catch(_){}
  try { LockService.getScriptLock().releaseLock(); } catch(_){}
}


/* ==========================================================
   [S07] Provisioning FSM (step/status + links)
   ========================================================== */
/**
 * Steps:
 * CREATED -> create workbook -> WORKBOOK_READY
 * WORKBOOK_READY -> ensure links -> LINKS_READY
 * LINKS_READY -> no-op
 */
function provisionStep(key){
  const row = findEventRowByKey_(key);
  if (!row) return { ok:false, error:'not found' };

  try{
    if (row.status === STATUS.ERROR){
      return { ok:false, error: row.statusMsg || 'error' };
    }

    if (row.status === STATUS.CREATED){
      if (!row.eventSpreadsheetId){
        const ss = SpreadsheetApp.create('NextUp Event · ' + (row.name || row.slug || row.id));
        row.eventSpreadsheetId = ss.getId();
        row.eventSpreadsheetUrl = ss.getUrl();
        // Optional: seed tabs here if you want
      }
      row.status = STATUS.WORKBOOK_READY;
      row.statusMsg = '';
      row.updatedAtISO = todayTimeISO_();
      upsertRow_(row);
      bustEventsCache_();
      return { ok:true, status: row.status };
    }

    if (row.status === STATUS.WORKBOOK_READY){
      ensureLinks_(row);
      if (row.publicUrl && row.displayUrl){
        row.status = STATUS.LINKS_READY;
        row.statusMsg = '';
        row.updatedAtISO = todayTimeISO_();
        upsertRow_(row);
        bustEventsCache_();
      }
      return { ok:true, status: row.status };
    }

    if (row.status === STATUS.LINKS_READY){
      return { ok:true, status: row.status };
    }

    row.status = STATUS.ERROR;
    row.statusMsg = 'Unknown status';
    row.updatedAtISO = todayTimeISO_();
    upsertRow_(row);
    bustEventsCache_();
    return { ok:false, error:'unknown status' };
  } catch(e){
    row.status = STATUS.ERROR;
    row.statusMsg = String(e);
    row.updatedAtISO = todayTimeISO_();
    upsertRow_(row);
    bustEventsCache_();
    return { ok:false, error:String(e) };
  }
}

function getProvisionStatus(key){
  const row = findEventRowByKey_(key);
  if (!row) return { ok:false, error:'not found' };
  if (row.status === STATUS.ERROR){
    return { ok:false, status: row.status, statusMsg: row.statusMsg || 'failed' };
  }
  return {
    ok:true,
    status: row.status,
    statusMsg: row.statusMsg || '',
    hasWorkbook: !!row.eventSpreadsheetId,
    hasLinks: !!row.publicUrl && !!row.displayUrl
  };
}

/** Fill public/display URLs if missing (safe/idempotent). */
function ensureLinks_(row){
  const base = ScriptApp.getService().getUrl();
  const key = encodeURIComponent(row.id || row.slug);
  if (!row.publicUrl)  row.publicUrl  = `${base}?p=public&event=${key}`;
  if (!row.displayUrl) row.displayUrl = `${base}?p=display&event=${key}&tv=1`;
}


/* ==========================================================
   [S08] Public Bundle / QR
   ========================================================== */
function getPublicBundle(key){
  const row = findEventRowByKey_(key);
  if (!row) return { ok:false, error:'not found' };
  return {
    ok:true,
    eventMeta: {
      id: row.id, slug: row.slug, name: row.name || '',
      dateISO: row.startDateISO || '',
      flow: 'Eventbook',
      elimType: row.elimType || '',
      seedMode: row.seedMode || '',
      status: row.status,
      formUrl: '' // optional future extension
    },
    schedule: [],
    standings: [],
    bracket: { type: row.elimType || 'single', rounds: [] }
  };
}

function getShareQr(key){
  const row = findEventRowByKey_(key);
  if (!row) return { ok:false, error:'not found' };
  if (!row.publicUrl) return { ok:false, error:'not ready' };
  // QR generation omitted; return URL (and qrB64 if you add a generator)
  return { ok:true, url: row.publicUrl, qrB64: '' };
}


/* ==========================================================
   [S09] Default / Archive
   ========================================================== */
function setDefaultEvent(key){
  const ss = getOrCreateControl_();
  const sh = ss.getSheetByName('Events');
  const range = sh.getDataRange().getValues();
  const headers = range[0];
  const colDefault = headers.indexOf('isDefault') + 1;
  const colId = headers.indexOf('id') + 1;
  const colSlug = headers.indexOf('slug') + 1;
  if (colDefault <= 0) return { ok:false, error:'missing column isDefault' };

  for (let r=2; r<=sh.getLastRow(); r++){
    const rowId   = sh.getRange(r,colId).getValue();
    const rowSlug = sh.getRange(r,colSlug).getValue();
    const on = (rowId === key || rowSlug === key);
    sh.getRange(r,colDefault).setValue(!!on);
  }
  SpreadsheetApp.flush();
  bustEventsCache_();
  return { ok:true };
}

function archiveEvent(key){
  const ss = getOrCreateControl_();
  const sh = ss.getSheetByName('Events');
  const range = sh.getDataRange().getValues();
  const headers = range[0];
  const idx = findRowIndexByKey_(headers, range, key);
  if (idx <= 0) return { ok:false, error:'not found' };
  sh.deleteRow(idx + 1); // +1 for header row
  SpreadsheetApp.flush();
  bustEventsCache_();
  return { ok:true };
}


/* ==========================================================
   [S10] Control Row CRUD (find/upsert helpers)
   ========================================================== */
function findEventRowByKey_(key){
  const ss = getOrCreateControl_();
  const sh = ss.getSheetByName('Events');
  const range = sh.getDataRange().getValues();
  const headers = range[0];
  for (let r=1; r<range.length; r++){
    const obj = toObj_(headers, range[r]);
    if (obj.id === key || obj.slug === key) return obj;
  }
  return null;
}

function findRowIndexByKey_(headers, data, key){
  const colId = headers.indexOf('id');
  const colSlug = headers.indexOf('slug');
  for (let r=1; r<data.length; r++){
    const row = data[r];
    if ((colId >= 0 && row[colId] === key) || (colSlug >= 0 && row[colSlug] === key)) return r;
  }
  return -1;
}

function upsertRow_(obj){
  const ss = getOrCreateControl_();
  const sh = ss.getSheetByName('Events');
  const headers = sh.getRange(1,1,1,sh.getLastColumn()).getValues()[0];

  const data = sh.getDataRange().getValues();
  const idx = findRowIndexByKey_(headers, data, obj.id || obj.slug);
  const targetRow = (idx >= 1) ? idx + 1 : sh.getLastRow() + 1;

  const rowArr = [];
  for (let i=0; i<headers.length; i++){
    const k = headers[i];
    rowArr.push(Object.prototype.hasOwnProperty.call(obj,k) ? obj[k] : '');
  }
  sh.getRange(targetRow,1,1,headers.length).setValues([rowArr]);
}


/* ==========================================================
   [S11] Utilities (cache, etag, dates, slugs, normalize, escape)
   ========================================================== */
function bustEventsCache_(){
  PropertiesService.getScriptProperties().setProperty('nu_events_etag_salt', String(Math.random()) + ':' + Date.now());
}

function computeEtag_(items){
  const salt = PropertiesService.getScriptProperties().getProperty('nu_events_etag_salt') || '';
  const json = JSON.stringify(items || []);
  const raw = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, json + '|' + salt);
  return Utilities.base64Encode(raw);
}

function todayISO_(){
  const d = new Date();
  const y = d.getFullYear();
  const m = ('' + (d.getMonth()+1)).padStart(2,'0');
  const dd = ('' + d.getDate()).padStart(2,'0');
  return y + '-' + m + '-' + dd;
}
function todayTimeISO_(){ return new Date().toISOString().replace('Z',''); }

function normalizeDateISO_(v){
  if (!v) return todayISO_();
  const s = String(v).trim();
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s;
  const d = new Date(s);
  if (isNaN(d.getTime())) return todayISO_();
  return d.toISOString().slice(0,10);
}

function normEnum_(v, allowed){
  const s = String(v||'').trim().toLowerCase();
  return allowed.indexOf(s) >= 0 ? s : allowed[0];
}

function slugify_(s){
  return String(s||'')
    .toLowerCase()
    .replace(/[^a-z0-9]+/g,'-')
    .replace(/(^-|-$)/g,'')
    .slice(0,48);
}

function uniqueSlug_(base){
  const out = readEventsIndex_();
  const taken = new Set(out.items.map(it => (it.slug || '').toLowerCase()));
  if (!taken.has(base)) return base;
  for (var i=2; i<9999; i++){
    var candidate = (base + '-' + i).slice(0,48);
    if (!taken.has(candidate)) return candidate;
  }
  return base + '-' + Utilities.getUuid().slice(0,4);
}

function genId_(){ return 'ev_' + Utilities.getUuid().replace(/-/g,'').slice(0,16); }

function makeTag_(name, dateISO, id){
  const n = (name || '').toLowerCase().replace(/[^a-z0-9]+/g,'-').slice(0,12);
  const d = (dateISO || todayISO_()).replace(/-/g,'');
  return n + '-' + d + '-' + String(id || '').slice(-4);
}

function escHtml_(s){
  return String(s).replace(/[&<>\"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
}


/* ==========================================================
   [S12] Audit Endpoints (Status.html)
   ========================================================== */
/** Public entry: runs all audits and returns a structured report */
function auditDeep(){
  const secs = [];
  try { secs.push(auditRouter_()); }                catch(e){ secs.push(sectionErr_('Router', e)); }
  try { secs.push(auditControlSheet_()); }          catch(e){ secs.push(sectionErr_('Control Sheet', e)); }
  try { secs.push(auditProvisionInvariants_()); }   catch(e){ secs.push(sectionErr_('Provision Invariants', e)); }
  try { secs.push(auditEventsCache_()); }           catch(e){ secs.push(sectionErr_('ETag / Cache', e)); }
  try { secs.push(auditClientFiles_()); }           catch(e){ secs.push(sectionErr_('Client Files', e)); }

  return {
    ok: secs.every(s => s.ok),
    build: BUILD_ID,
    generatedAt: todayTimeISO_(),
    sections: secs
  };
}

/** ---------- Sections ---------- */
function auditRouter_(){
  const title = 'Router';
  const checks = [];
  ['admin','public','display','poster','status'].forEach(p => checks.push(okCheck_('route:'+p, `Route "${p}" registered`, true)));
  checks.push(okCheck_('tmpl:appTitle','Template var appTitle provided', true));
  checks.push(okCheck_('tmpl:BUILD_ID','Template var BUILD_ID provided', true));
  return finalizeSection_(title, checks);
}

function auditControlSheet_(){
  const title = 'Control Sheet';
  const checks = [];
  const ss = getOrCreateControl_();
  const sh = ss.getSheetByName('Events');
  const headers = sh.getRange(1,1,1,sh.getLastColumn()).getValues()[0].map(String);
  CONTROL_HEADERS.forEach(h => {
    const present = headers.indexOf(h) >= 0;
    checks.push(statusCheck_('hdr:'+h, 'Header "'+h+'" present', present ? 'green':'red', present ? '' : 'Missing column'));
  });
  checks.push(okCheck_('sheet:name','Sheet "Events" exists', !!sh));
  return finalizeSection_(title, checks);
}

function auditProvisionInvariants_(){
  const title = 'Provision Invariants';
  const checks = [];
  const name = 'AUDIT-' + Utilities.getUuid().slice(0,8);
  const res = createEvent({ name, startDateISO: todayISO_(), elimType:'single', seedMode:'seeded' });
  if (!res || !res.ok){
    checks.push(statusCheck_('create','Create event succeeds','red', (res && res.error) || 'create failed'));
    return finalizeSection_(title, checks);
  }

  var id = res.item.id;

  // Step 1: workbook
  var s1 = provisionStep(id);
  checks.push(okCheck_('prov:step1','Provision step 1 ok', !!s1 && !!s1.ok));
  var st1 = getProvisionStatus(id);
  var wready = st1 && st1.ok && (st1.status === STATUS.WORKBOOK_READY || st1.status === STATUS.LINKS_READY);
  checks.push(statusCheck_('prov:wready','Status >= WORKBOOK_READY after step1', wready ? 'green':'red', wready ? '' : 'not advanced'));

  // Step 2: links (idempotent calls)
  provisionStep(id); provisionStep(id);
  var st2 = getProvisionStatus(id);
  var row = findEventRowByKey_(id);
  var urlsPresent = !!(row && row.publicUrl && row.displayUrl);
  var linksReady = st2 && st2.ok && st2.status === STATUS.LINKS_READY;
  checks.push(statusCheck_('prov:links','LINKS_READY implies publicUrl/displayUrl assigned',
    (linksReady && urlsPresent) ? 'green' : (linksReady ? 'yellow' : 'yellow'),
    urlsPresent ? '' : 'urls missing'));

  // Cleanup
  archiveEvent(id);

  return finalizeSection_(title, checks);
}

function auditEventsCache_(){
  const title = 'ETag / Cache';
  const checks = [];
  var r1 = getEventsSafe(null);
  var ok1 = !!r1 && !!r1.ok && !!r1.etag;
  checks.push(statusCheck_('etag:first','getEventsSafe(null) ok', ok1 ? 'green':'red', ok1 ? '' : 'missing etag/ok'));
  var r2 = getEventsSafe(ok1 ? r1.etag : null);
  var notMod = !!r2 && !!r2.notModified;
  checks.push(statusCheck_('etag:notmod','getEventsSafe(etag) returns notModified', notMod ? 'green':'red', notMod ? '' : 'no notModified'));
  return finalizeSection_(title, checks);
}

function auditClientFiles_(){
  const title = 'Client Files';
  const checks = [];
  var mustHave = {
    'Admin':   ['#eventName','#eventDate','#elimType','#seedMode','#btnCreateEvent','#chooseEvent','#btnOpenPublic','#btnOpenTV','#btnCopyLink'],
    'Public':  ['#title','#date','#flow','#elim','#seed','#scheduleTbl','#standingsTbl','#bracketWrap'],
    'Display': ['#title','#scheduleTbl','#standingsTbl','#bracketWrap'],
    'Poster':  ['#posterTitle','#eventDate','#qrPublic','#publicUrlLabel','#qrForm','#formUrlLabel'],
    'Styles':  ['.badge','.toast','.table','.pfbar']
  };
  Object.keys(mustHave).forEach(function(name){
    var html = getFileContentSafe_(name);
    var present = !!html;
    checks.push(statusCheck_('file:'+name, 'File "'+name+'.html" present', present ? 'green':'red', present ? '' : 'missing'));
    if (present){
      mustHave[name].forEach(function(sel){
        var found = (html.indexOf(sel.replace(/"/g,'\\"')) >= 0) || (html.indexOf(sel) >= 0);
        checks.push(statusCheck_('sel:'+name+':'+sel, '"'+name+'" contains selector '+sel, found ? 'green':'red', found ? '' : 'not found'));
      });
    }
  });
  return finalizeSection_(title, checks);
}

/** ---------- Audit helpers ---------- */
function getFileContentSafe_(name){ try{ return HtmlService.createHtmlOutputFromFile(name).getContent(); } catch(e){ return ''; } }
function okCheck_(id,label,cond){ return { id, label, status:(cond?'green':'red'), detail:(cond?'':'failed') }; }
function statusCheck_(id,label,status,detail){ return { id, label, status, detail:String(detail||'') }; }
function finalizeSection_(title, checks){
  var sevOrder = { red:3, yellow:2, green:1 };
  var worst = 'green';
  for (var i=0;i<checks.length;i++){ var s = checks[i].status || 'green'; if (sevOrder[s] > sevOrder[worst]) worst = s; }
  return { title, ok: worst !== 'red', severity: worst, checks };
}
function sectionErr_(title, err){
  return { title, ok:false, severity:'red', checks:[{ id:'error', label:title+' threw', status:'red', detail:String(err) }] };
}