name: CD Pipeline - Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual deployment

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        REACT_APP_ENV: staging
        
    - name: Run smoke tests
      run: npm run test:smoke
      continue-on-error: true
      
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "üöÄ Deployed to staging environment"
        echo "üìç URL: https://staging.yourdomain.com"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        REACT_APP_ENV: production
        
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          üöÄ Automated production deployment
          
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}
          **Workflow:** ${{ github.workflow }}
        draft: false
        prerelease: false
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "üéâ Deployed to production environment"
        echo "üìç URL: https://yourdomain.com"
        echo "üè∑Ô∏è  Version: v${{ github.run_number }}"

  # Post-deployment health check
  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
    - name: Wait for deployment
      run: sleep 30
      
    - name: Check application health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://yourdomain.com/health)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed with status $response"
          exit 1
        fi
        
    - name: Run production smoke tests
      run: |
        echo "üß™ Running production smoke tests..."
        # Add your smoke test commands here
        
    - name: Notify team
      if: always()
      run: |
        echo "üì¢ Production deployment complete and verified"
