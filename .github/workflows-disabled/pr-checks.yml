name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # PR validation
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR title
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?:\ .+ ]]; then
          echo "‚ùå PR title must follow conventional commits format"
          echo "Examples: feat: add user login, fix(api): resolve timeout issue"
          exit 1
        fi
        
    - name: Check PR description
      run: |
        if [ -z "${{ github.event.pull_request.body }}" ]; then
          echo "‚ö†Ô∏è  PR description is empty. Please add a description."
          exit 1
        fi
        
    - name: Check branch name
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|release)/.+ ]]; then
          echo "‚ö†Ô∏è  Branch name should follow: feature/*, bugfix/*, hotfix/*, release/*"
        fi

  # Size check
  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR size
      run: |
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
        ADDITIONS=$(git diff --shortstat origin/${{ github.base_ref }}...HEAD | grep -oP '\d+(?= insertion)')
        
        echo "üìä PR Statistics:"
        echo "Files changed: $CHANGED_FILES"
        echo "Lines added: $ADDITIONS"
        
        if [ "$CHANGED_FILES" -gt 50 ]; then
          echo "‚ö†Ô∏è  Large PR: Consider breaking into smaller PRs"
        fi

  # Test coverage check
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test -- --coverage
      
    - name: Check coverage threshold
      run: |
        COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
        echo "üìä Code coverage: $COVERAGE%"
        
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "‚ö†Ô∏è  Coverage below 80% threshold"
          exit 1
        fi

  # Automated code review
  auto-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all checks
      run: |
        echo "Running automated checks..."
        npm run lint
        npm run test
        npm run build
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '‚úÖ Automated checks passed!\n\n- Linting: Passed\n- Tests: Passed\n- Build: Successful\n\nReady for review! üöÄ'
          })

  # Dependency review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  # Label assignment
  auto-label:
    name: Auto Label
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Auto-assign labels
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const labels = [];
          
          // Check file types
          const hasTests = files.some(f => f.filename.includes('test') || f.filename.includes('spec'));
          const hasDocs = files.some(f => f.filename.includes('.md'));
          const hasSrc = files.some(f => f.filename.includes('src/'));
          
          if (hasTests) labels.push('tests');
          if (hasDocs) labels.push('documentation');
          if (hasSrc) labels.push('code-change');
          
          // Check size
          const additions = files.reduce((sum, f) => sum + f.additions, 0);
          if (additions > 500) labels.push('large');
          else if (additions > 100) labels.push('medium');
          else labels.push('small');
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }
